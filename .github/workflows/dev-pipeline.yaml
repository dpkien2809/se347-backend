name: dev-pipeline

on:
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/dev-pipeline.yaml
      - 'user-svc/src/main/**'
      - 'user-svc/compose.yaml'
    branches:
      - dev

jobs:
  hello:
    name: hello world
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1

      - name: list
        run: |
          echo "Hello world"

  trivy_scan:
    name: Trivy Security Scan for Container Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Log in to GitHub Container Registry (GHCR)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login ghcr.io -u "$DOCKER_USERNAME" --password-stdin

      # - name: Pull and scan Docker images
      #   run: |
      #     # List of Docker images from compose.yaml
      #     IMAGES=(
      #       "docker.elastic.co/elasticsearch/elasticsearch:8.6.2"
      #       "docker.elastic.co/kibana/kibana:8.6.2"
      #       "docker.redpanda.com/redpandadata/console:latest"
      #       "confluentinc/cp-zookeeper:7.4.6"
      #       "confluentinc/cp-kafka:7.4.6"
      #     )
          
      #     # Install Trivy
      #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          
      #     # Iterate over each image and scan
      #     for IMAGE in "${IMAGES[@]}"; do
      #       echo "Pulling image: $IMAGE"
      #       docker pull "$IMAGE"
            
      #       echo "Scanning image: $IMAGE"
      #       trivy image "$IMAGE"
      #     done

      - name: Pull and scan Docker images
        run: |
          # List of Docker images from compose.yaml
          IMAGES=(
            "docker.elastic.co/elasticsearch/elasticsearch:8.6.2"
            "docker.elastic.co/kibana/kibana:8.6.2"
            "docker.redpanda.com/redpandadata/console:latest"
            "confluentinc/cp-zookeeper:7.4.6"
            "confluentinc/cp-kafka:7.4.6"
          )
            
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
            
          OUTPUT_FILE="trivy_scan_results.txt"
          echo "Trivy Scan Results" > "$OUTPUT_FILE"
            
          for IMAGE in "${IMAGES[@]}"; do
            echo "Pulling image: $IMAGE" >> "$OUTPUT_FILE"
            docker pull "$IMAGE" >> "$OUTPUT_FILE" 2>&1
              
            echo "Scanning image: $IMAGE" >> "$OUTPUT_FILE"
            trivy image "$IMAGE" >> "$OUTPUT_FILE" 2>&1
          done
            
          echo "Trivy scan completed. Results saved in $OUTPUT_FILE"
      
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results
          path: trivy_scan_results.txt

  checkov-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov for Dockerfile
        run: |
          mkdir -p checkov-reports
          find . -name 'Dockerfile' | while read file; do
            echo "Scanning $file" >> checkov-reports/reportcheckov.txt
            checkov -f "$file" --framework dockerfile >> checkov-reports/reportcheckov.txt || true
          done

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v3
        with:
          name: checkov-report
          path: checkov-reports/reportcheckov.txt